document.addEventListener('DOMContentLoaded', function () {

	var webPage = document.getElementById('container');

	// create header with all components
	// ------------------------------------------------

	var header = document.createElement('div');
	header.classList.add('navbar');
	header.classList.add('navbar-default');
	header.classList.add('navbar-fixed-top');
	header.classList.add('navbar-color-fix');

	webPage.appendChild(header);
	console.log(header.style);

	var tabBar = document.createElement('div');
	tabBar.classList.add('nav');
	tabBar.classList.add('tabBar');

	header.appendChild(tabBar);

	var tabContents = [['tab', 'tab', 'tab', 'tab', 'tab']];

	var tabTitles = ['about', 'get data', 'tools'];
	var tabObjects = [];
	for (var i = 0; i < tabTitles.length; i++) {
		var tabBox = document.createElement('div');
		tabBox.innerHTML = "<div class='miniTab'><span>" + tabTitles[i] + "<div></span>";
		tabBox.classList.add('tabBox');
		console.log(tabBox);
		tabBar.appendChild(tabBox);

		tabBox.addEventListener('mouseover', function () {
			var start = document.createElement('div');
			start.classList.add('first-appear-tab');
			start.innerHTML = "<div class='miniTab'><span>" + tabContents[0][0] + " " + 0 + "<div></span>";
			this.appendChild(start);

			for (var k = 0; k < tabContents.length; k++) {
				var list = document.createElement('div');
				list.classList.add('appearTab');
				list.innerHTML = "<div class='miniTab'><span>" + tabContents[0][k] + " " + k + "<div></span>";
				this.appendChild(list);
			}
		});
		tabObjects.push(tabBox);
	}

	console.log(tabObjects);
});

window.app = angular.module('myApp', ['ui.router']);

app.config(function ($urlRouterProvider, $locationProvider) {
	$locationProvider.html5Mode(true);
	$urlRouterProvider.otherwise('/');
});

app.config(function ($stateProvider) {
	$stateProvider.state('home', {
		url: '/',
		controller: 'homeCtrl',
		templateUrl: 'js/angular/angular.html'

	});
});

app.controller('homeCtrl', function ($scope, $state, $timeout, myFactory) {
	$scope.check = 'lalalala';
	$scope.data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	console.log(myFactory.getNum());
});

app.directive('footer', function () {
	return {
		restrict: "EA",
		scope: {
			data: '@'
		},
		templateUrl: 'js/angular/footer.html',
		link: function (scope, elem, attrs) {
			console.log(scope.data);
			console.log(scope.data + 'this is awesome');
		}

	};
});

app.filter('simpleFilter', function () {
	return function (item) {
		console.log(item);
		var out = [];
		angular.forEach(item, function (obj) {
			if (obj < 5) out.push(obj);
		});
		return out;
	};
});

app.factory('myFactory', function () {
	return {
		getNum: function () {
			return Math.floor(Math.random() * 100);
		}
	};
});

// d3.select('body')
// 	.append('svg')
// 	.attr({
// 		height: 600,
// 		width: 700
// 	})
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJhbmd1bGFyL2FuZ3VsYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBQSxnQkFBQSxDQUFBLGtCQUFBLEVBQUEsWUFBQTs7QUFFQSxLQUFBLFVBQUEsU0FBQSxjQUFBLENBQUEsV0FBQSxDQUFBOzs7OztBQUZBLEtBT0EsU0FBQSxTQUFBLGFBQUEsQ0FBQSxLQUFBLENBQUEsQ0FQQTtBQVFBLFFBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxRQUFBLEVBUkE7QUFTQSxRQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsZ0JBQUEsRUFUQTtBQVVBLFFBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxrQkFBQSxFQVZBO0FBV0EsUUFBQSxTQUFBLENBQUEsR0FBQSxDQUFBLGtCQUFBLEVBWEE7O0FBYUEsU0FBQSxXQUFBLENBQUEsTUFBQSxFQWJBO0FBY0EsU0FBQSxHQUFBLENBQUEsT0FBQSxLQUFBLENBQUEsQ0FkQTs7QUFnQkEsS0FBQSxTQUFBLFNBQUEsYUFBQSxDQUFBLEtBQUEsQ0FBQSxDQWhCQTtBQWlCQSxRQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxFQWpCQTtBQWtCQSxRQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsUUFBQSxFQWxCQTs7QUFxQkEsUUFBQSxXQUFBLENBQUEsTUFBQSxFQXJCQTs7QUF1QkEsS0FBQSxjQUFBLENBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBLENBQUEsQ0F2QkE7O0FBeUJBLEtBQUEsWUFBQSxDQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUEsT0FBQSxDQUFBLENBekJBO0FBMEJBLEtBQUEsYUFBQSxFQUFBLENBMUJBO0FBMkJBLE1BQUEsSUFBQSxJQUFBLENBQUEsRUFBQSxJQUFBLFVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQTtBQUNBLE1BQUEsU0FBQSxTQUFBLGFBQUEsQ0FBQSxLQUFBLENBQUEsQ0FEQTtBQUVBLFNBQUEsU0FBQSxHQUFBLGdDQUFBLFVBQUEsQ0FBQSxDQUFBLEdBQUEsY0FBQSxDQUZBO0FBR0EsU0FBQSxTQUFBLENBQUEsR0FBQSxDQUFBLFFBQUEsRUFIQTtBQUlBLFVBQUEsR0FBQSxDQUFBLE1BQUEsRUFKQTtBQUtBLFNBQUEsV0FBQSxDQUFBLE1BQUEsRUFMQTs7QUFPQSxTQUFBLGdCQUFBLENBQUEsV0FBQSxFQUFBLFlBQUE7QUFDQSxPQUFBLFFBQUEsU0FBQSxhQUFBLENBQUEsS0FBQSxDQUFBLENBREE7QUFFQSxTQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsa0JBQUEsRUFGQTtBQUdBLFNBQUEsU0FBQSxHQUFBLGdDQUFBLFlBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsR0FBQSxDQUFBLEdBQUEsY0FBQSxDQUhBO0FBSUEsUUFBQSxXQUFBLENBQUEsS0FBQSxFQUpBOztBQU1BLFFBQUEsSUFBQSxJQUFBLENBQUEsRUFBQSxJQUFBLFlBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQTtBQUNBLFFBQUEsT0FBQSxTQUFBLGFBQUEsQ0FBQSxLQUFBLENBQUEsQ0FEQTtBQUVBLFNBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxXQUFBLEVBRkE7QUFHQSxTQUFBLFNBQUEsR0FBQSxnQ0FBQSxZQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLGNBQUEsQ0FIQTtBQUlBLFNBQUEsV0FBQSxDQUFBLElBQUEsRUFKQTtJQUFBO0dBTkEsQ0FBQSxDQVBBO0FBb0JBLGFBQUEsSUFBQSxDQUFBLE1BQUEsRUFwQkE7RUFBQTs7QUF3QkEsU0FBQSxHQUFBLENBQUEsVUFBQSxFQW5EQTtDQUFBLENBQUE7O0FDQUEsT0FBQSxHQUFBLEdBQUEsUUFBQSxNQUFBLENBQUEsT0FBQSxFQUFBLENBQUEsV0FBQSxDQUFBLENBQUE7O0FBR0EsSUFBQSxNQUFBLENBQUEsVUFBQSxrQkFBQSxFQUFBLGlCQUFBLEVBQUE7QUFDQSxtQkFBQSxTQUFBLENBQUEsSUFBQSxFQURBO0FBRUEsb0JBQUEsU0FBQSxDQUFBLEdBQUEsRUFGQTtDQUFBLENBQUE7O0FBTUEsSUFBQSxNQUFBLENBQUEsVUFBQSxjQUFBLEVBQUE7QUFDQSxnQkFBQSxLQUFBLENBQUEsTUFBQSxFQUFBO0FBQ0EsT0FBQSxHQUFBO0FBQ0EsY0FBQSxVQUFBO0FBQ0EsZUFBQSx5QkFBQTs7RUFIQSxFQURBO0NBQUEsQ0FBQTs7QUFVQSxJQUFBLFVBQUEsQ0FBQSxVQUFBLEVBQUEsVUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUE7QUFDQSxRQUFBLEtBQUEsR0FBQSxVQUFBLENBREE7QUFFQSxRQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxDQUZBO0FBR0EsU0FBQSxHQUFBLENBQUEsVUFBQSxNQUFBLEVBQUEsRUFIQTtDQUFBLENBQUE7O0FBT0EsSUFBQSxTQUFBLENBQUEsUUFBQSxFQUFBLFlBQUE7QUFDQSxRQUFBO0FBQ0EsWUFBQSxJQUFBO0FBQ0EsU0FBQTtBQUNBLFNBQUEsR0FBQTtHQURBO0FBR0EsZUFBQSx3QkFBQTtBQUNBLFFBQUEsVUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQTtBQUNBLFdBQUEsR0FBQSxDQUFBLE1BQUEsSUFBQSxDQUFBLENBREE7QUFFQSxXQUFBLEdBQUEsQ0FBQSxNQUFBLElBQUEsR0FBQSxpQkFBQSxDQUFBLENBRkE7R0FBQTs7RUFOQSxDQURBO0NBQUEsQ0FBQTs7QUFpQkEsSUFBQSxNQUFBLENBQUEsY0FBQSxFQUFBLFlBQUE7QUFDQSxRQUFBLFVBQUEsSUFBQSxFQUFBO0FBQ0EsVUFBQSxHQUFBLENBQUEsSUFBQSxFQURBO0FBRUEsTUFBQSxNQUFBLEVBQUEsQ0FGQTtBQUdBLFVBQUEsT0FBQSxDQUFBLElBQUEsRUFBQSxVQUFBLEdBQUEsRUFBQTtBQUNBLE9BQUEsTUFBQSxDQUFBLEVBQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxFQUFBO0dBREEsQ0FBQSxDQUhBO0FBTUEsU0FBQSxHQUFBLENBTkE7RUFBQSxDQURBO0NBQUEsQ0FBQTs7QUFhQSxJQUFBLE9BQUEsQ0FBQSxXQUFBLEVBQUEsWUFBQTtBQUNBLFFBQUE7QUFDQSxVQUFBLFlBQUE7QUFDQSxVQUFBLEtBQUEsS0FBQSxDQUFBLEtBQUEsTUFBQSxLQUFBLEdBQUEsQ0FBQSxDQURBO0dBQUE7RUFEQSxDQURBO0NBQUEsQ0FBQSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCl7XG5cbnZhciB3ZWJQYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpO1xuXG4vLyBjcmVhdGUgaGVhZGVyIHdpdGggYWxsIGNvbXBvbmVudHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbmhlYWRlci5jbGFzc0xpc3QuYWRkKCduYXZiYXInKVxuaGVhZGVyLmNsYXNzTGlzdC5hZGQoJ25hdmJhci1kZWZhdWx0JylcbmhlYWRlci5jbGFzc0xpc3QuYWRkKCduYXZiYXItZml4ZWQtdG9wJylcbmhlYWRlci5jbGFzc0xpc3QuYWRkKCduYXZiYXItY29sb3ItZml4Jylcblxud2ViUGFnZS5hcHBlbmRDaGlsZChoZWFkZXIpXG5jb25zb2xlLmxvZyhoZWFkZXIuc3R5bGUpXG5cbnZhciB0YWJCYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxudGFiQmFyLmNsYXNzTGlzdC5hZGQoJ25hdicpXG50YWJCYXIuY2xhc3NMaXN0LmFkZCgndGFiQmFyJylcblxuXG5oZWFkZXIuYXBwZW5kQ2hpbGQodGFiQmFyKVxuXG52YXIgdGFiQ29udGVudHMgPVtbJ3RhYicsJ3RhYicsJ3RhYicsJ3RhYicsJ3RhYiddXVxuXG52YXIgdGFiVGl0bGVzID0gWydhYm91dCcsICdnZXQgZGF0YScsICd0b29scyddXG52YXIgdGFiT2JqZWN0cyA9IFtdXG5mb3IodmFyIGkgPTA7IGk8dGFiVGl0bGVzLmxlbmd0aDsgaSsrKXtcblx0dmFyIHRhYkJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cdHRhYkJveC5pbm5lckhUTUwgPSBcIjxkaXYgY2xhc3M9J21pbmlUYWInPjxzcGFuPlwiK3RhYlRpdGxlc1tpXStcIjxkaXY+PC9zcGFuPlwiO1xuXHR0YWJCb3guY2xhc3NMaXN0LmFkZCgndGFiQm94Jylcblx0Y29uc29sZS5sb2codGFiQm94KVxuXHR0YWJCYXIuYXBwZW5kQ2hpbGQodGFiQm94KVxuXG5cdHRhYkJveC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIHN0YXJ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRcdFx0c3RhcnQuY2xhc3NMaXN0LmFkZCgnZmlyc3QtYXBwZWFyLXRhYicpXG5cdFx0XHRcdHN0YXJ0LmlubmVySFRNTCA9IFwiPGRpdiBjbGFzcz0nbWluaVRhYic+PHNwYW4+XCIrdGFiQ29udGVudHNbMF1bMF0rXCIgXCIrIDAgK1wiPGRpdj48L3NwYW4+XCI7XG5cdFx0XHRcdHRoaXMuYXBwZW5kQ2hpbGQoc3RhcnQpXG5cblx0XHRcdGZvcih2YXIgayA9IDA7IGs8dGFiQ29udGVudHMubGVuZ3RoOyBrKyspe1xuXHRcdFx0XHR2YXIgbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cdFx0XHRcdGxpc3QuY2xhc3NMaXN0LmFkZCgnYXBwZWFyVGFiJylcblx0XHRcdFx0bGlzdC5pbm5lckhUTUwgPSBcIjxkaXYgY2xhc3M9J21pbmlUYWInPjxzcGFuPlwiK3RhYkNvbnRlbnRzWzBdW2tdK1wiIFwiKyBrICtcIjxkaXY+PC9zcGFuPlwiO1xuXHRcdFx0XHR0aGlzLmFwcGVuZENoaWxkKGxpc3QpXG5cdFx0XHR9XG5cdH0pXG5cdHRhYk9iamVjdHMucHVzaCh0YWJCb3gpXG5cbn1cblxuY29uc29sZS5sb2codGFiT2JqZWN0cylcblxufSlcblxuIiwid2luZG93LmFwcCA9IGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFsndWkucm91dGVyJ10pXG5cblxuYXBwLmNvbmZpZyhmdW5jdGlvbigkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKXtcblx0JGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuXHQkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJylcbn0pXG5cblxuYXBwLmNvbmZpZyhmdW5jdGlvbigkc3RhdGVQcm92aWRlcil7XG5cdCRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdob21lJyx7XG5cdFx0dXJsOiAnLycsXG5cdFx0Y29udHJvbGxlcjogJ2hvbWVDdHJsJyxcblx0XHR0ZW1wbGF0ZVVybDonanMvYW5ndWxhci9hbmd1bGFyLmh0bWwnXG5cblx0fSlcblxufSlcblxuYXBwLmNvbnRyb2xsZXIoJ2hvbWVDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsICR0aW1lb3V0LCBteUZhY3Rvcnkpe1xuXHQkc2NvcGUuY2hlY2sgPSAnbGFsYWxhbGEnXG5cdCRzY29wZS5kYXRhID0gWzEsMiwzLDQsNSw2LDcsOCw5LDEwXTtcblx0Y29uc29sZS5sb2cobXlGYWN0b3J5LmdldE51bSgpKVxuXG59KVxuXG5hcHAuZGlyZWN0aXZlKCdmb290ZXInLCBmdW5jdGlvbigpe1xuXHRyZXR1cm4ge1xuXHRcdHJlc3RyaWN0OiBcIkVBXCIsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGRhdGE6ICdAJ1xuXHRcdH0sXG5cdFx0dGVtcGxhdGVVcmw6ICdqcy9hbmd1bGFyL2Zvb3Rlci5odG1sJyxcblx0XHRsaW5rOiBmdW5jdGlvbihzY29wZSxlbGVtLGF0dHJzKXtcblx0XHRcdGNvbnNvbGUubG9nKHNjb3BlLmRhdGEpXG5cdFx0XHRjb25zb2xlLmxvZyhzY29wZS5kYXRhICsgJ3RoaXMgaXMgYXdlc29tZScpXG5cblx0XHR9XG5cblxuXHR9XG59KVxuXG5hcHAuZmlsdGVyKCdzaW1wbGVGaWx0ZXInLCBmdW5jdGlvbigpe1xuXHRyZXR1cm4gZnVuY3Rpb24oaXRlbSl7XG5cdFx0Y29uc29sZS5sb2coaXRlbSlcblx0XHR2YXIgb3V0ID0gW107XG5cdFx0YW5ndWxhci5mb3JFYWNoKGl0ZW0sZnVuY3Rpb24ob2JqKXtcblx0XHRcdGlmKG9iaiA8IDUpIG91dC5wdXNoKG9iailcdFxuXHRcdH0pXG5cdFx0cmV0dXJuIG91dFxuXHRcdFxuXHR9XG59KVxuXG5cbmFwcC5mYWN0b3J5KCdteUZhY3RvcnknLCBmdW5jdGlvbigpe1xuXHRyZXR1cm4ge1xuXHRcdGdldE51bTogZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTAwKVxuXHRcdH1cblx0fX0pXG5cblxuLy8gZDMuc2VsZWN0KCdib2R5Jylcbi8vIFx0LmFwcGVuZCgnc3ZnJylcbi8vIFx0LmF0dHIoe1xuLy8gXHRcdGhlaWdodDogNjAwLFxuLy8gXHRcdHdpZHRoOiA3MDBcbi8vIFx0fSlcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
